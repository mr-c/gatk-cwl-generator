{"summary": "Perform local realignment of reads around indels", "parallel": [], "activeregion": {}, "partitiontype": "READ", "walkertype": "ReadWalker", "arguments": [{"summary": "Determines how to compute the possible alternate consenses", "name": "--consensusDeterminationModel", "synonyms": "-model", "type": "ConsensusDeterminationModel", "required": "no", "fulltext": "We recommend that users run with USE_READS when trying to realign high quality longer read data mapped with a gapped aligner;\n Smith-Waterman is really only necessary when using an ungapped aligner (e.g. MAQ in the case of single-end read data).", "defaultValue": "NA", "minValue": "NA", "maxValue": "NA", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "optional_param", "options": [{"summary": "Uses only indels from a provided ROD of known indels.", "name": "KNOWNS_ONLY"}, {"summary": "Additionally uses indels already present in the original alignments of the reads.", "name": "USE_READS"}, {"summary": "Additionally uses 'Smith-Waterman' to generate alternate consenses.", "name": "USE_SW"}]}, {"summary": "Percentage of mismatches at a locus to be considered having high entropy (0.0 < entropy <= 1.0)", "name": "--entropyThreshold", "synonyms": "-entropy", "type": "double", "required": "no", "fulltext": "For expert users only!  This is similar to the argument in the RealignerTargetCreator walker. The point here is that the realigner\n will only proceed with the realignment (even above the given threshold) if it minimizes entropy among the reads (and doesn't simply\n push the mismatch column to another position). This parameter is just a heuristic and should be adjusted based on your particular data set.", "defaultValue": "0.15", "minValue": "-Infinity", "maxValue": "Infinity", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "advanced_param", "options": []}, {"summary": "Input VCF file(s) with known indels", "name": "--knownAlleles", "synonyms": "-known", "type": "List[RodBinding[VariantContext]]", "required": "no", "fulltext": "Any number of VCF files representing known indels to be used for constructing alternate consenses.\n Could be e.g. dbSNP and/or official 1000 Genomes indel calls.  Non-indel variants in these files will be ignored.", "defaultValue": "NA", "minValue": "NA", "maxValue": "NA", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "<a href=htsjdk_variant_bcf2_BCF2Codec.php>BCF2</a>, <a href=htsjdk_variant_vcf_VCFCodec.php>VCF</a>, <a href=htsjdk_variant_vcf_VCF3Codec.php>VCF3</a>", "kind": "optional_in", "options": []}, {"summary": "LOD threshold above which the cleaner will clean", "name": "--LODThresholdForCleaning", "synonyms": "-LOD", "type": "double", "required": "no", "fulltext": "This term is equivalent to \"significance\" - i.e. is the improvement significant enough to merit realignment? Note that this number\n should be adjusted based on your particular data set. For low coverage and/or when looking for indels with low allele frequency,\n this number should be smaller.", "defaultValue": "5.0", "minValue": "-Infinity", "maxValue": "Infinity", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "optional_param", "options": []}, {"summary": "Max alternate consensuses to try (necessary to improve performance in deep coverage)", "name": "--maxConsensuses", "synonyms": "-maxConsensuses", "type": "int", "required": "no", "fulltext": "For expert users only!  If you need to find the optimal solution regardless of running time, use a higher number.", "defaultValue": "30", "minValue": "-Infinity", "maxValue": "Infinity", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "advanced_param", "options": []}, {"summary": "maximum insert size of read pairs that we attempt to realign", "name": "--maxIsizeForMovement", "synonyms": "-maxIsize", "type": "int", "required": "no", "fulltext": "For expert users only!", "defaultValue": "3000", "minValue": "-Infinity", "maxValue": "Infinity", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "advanced_param", "options": []}, {"summary": "Maximum positional move in basepairs that a read can be adjusted during realignment", "name": "--maxPositionalMoveAllowed", "synonyms": "-maxPosMove", "type": "int", "required": "no", "fulltext": "For expert users only!", "defaultValue": "200", "minValue": "-Infinity", "maxValue": "Infinity", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "advanced_param", "options": []}, {"summary": "Max reads used for finding the alternate consensuses (necessary to improve performance in deep coverage)", "name": "--maxReadsForConsensuses", "synonyms": "-greedy", "type": "int", "required": "no", "fulltext": "For expert users only!  If you need to find the optimal solution regardless of running time, use a higher number.", "defaultValue": "120", "minValue": "-Infinity", "maxValue": "Infinity", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "advanced_param", "options": []}, {"summary": "Max reads allowed at an interval for realignment", "name": "--maxReadsForRealignment", "synonyms": "-maxReads", "type": "int", "required": "no", "fulltext": "For expert users only!  If this value is exceeded at a given interval, realignment is not attempted and the reads are passed to the output file(s) as-is.\n If you need to allow more reads (e.g. with very deep coverage) regardless of memory, use a higher number.", "defaultValue": "20000", "minValue": "-Infinity", "maxValue": "Infinity", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "advanced_param", "options": []}, {"summary": "max reads allowed to be kept in memory at a time by the SAMFileWriter", "name": "--maxReadsInMemory", "synonyms": "-maxInMemory", "type": "int", "required": "no", "fulltext": "For expert users only!  To minimize memory consumption you can lower this number (but then the tool may skip realignment on regions with too much coverage;\n and if the number is too low, it may generate errors during realignment). Just make sure to give Java enough memory! 4Gb should be enough with the default value.", "defaultValue": "150000", "minValue": "-Infinity", "maxValue": "Infinity", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "advanced_param", "options": []}, {"summary": "Don't output the original cigar or alignment start tags for each realigned read in the output bam", "name": "--noOriginalAlignmentTags", "synonyms": "-noTags", "type": "boolean", "required": "no", "fulltext": "", "defaultValue": "NA", "minValue": "NA", "maxValue": "NA", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "advanced_flag", "options": []}, {"summary": "Generate one output file for each input (-I) bam file (not compatible with -output)", "name": "--nWayOut", "synonyms": "-nWayOut", "type": "String", "required": "no", "fulltext": "Reads from all input files will be realigned together, but then each read will be saved in the output file corresponding to the input file that\n the read came from. There are two ways to generate output bam file names: 1) if the value of this argument is a general string (e.g. '.cleaned.bam'),\n then extensions (\".bam\" or \".sam\") will be stripped from the input file names and the provided string value will be pasted on instead; 2) if the\n value ends with a '.map' (e.g. input_output.map), then the two-column tab-separated file with the specified name must exist and list unique output\n file name (2nd column) for each input file name (1st column).\n\n Note that some GATK arguments do NOT work in conjunction with nWayOut (e.g. --disable_bam_indexing).", "defaultValue": "NA", "minValue": "NA", "maxValue": "NA", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "optional_param", "options": []}, {"summary": "Output bam", "name": "--out", "synonyms": "-o", "type": "GATKSAMFileWriter", "required": "no", "fulltext": "The realigned bam file.", "defaultValue": "NA", "minValue": "NA", "maxValue": "NA", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "optional_out", "options": []}, {"summary": "Intervals file output from RealignerTargetCreator", "name": "--targetIntervals", "synonyms": "-targetIntervals", "type": "IntervalBinding[Feature]", "required": "yes", "fulltext": "The interval list output from the RealignerTargetCreator tool using the same bam(s), reference, and known indel file(s).", "defaultValue": "NA", "minValue": "NA", "maxValue": "NA", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "required_in", "options": []}], "refwindow": {}, "description": "\n\n <p>\n The local realignment process is designed to consume one or more BAM files and to locally realign reads such that the number of mismatching bases\n is minimized across all the reads. In general, a large percent of regions requiring local realignment are due to the presence of an insertion\n or deletion (indels) in the individual's genome with respect to the reference genome.  Such alignment artifacts result in many bases mismatching\n the reference near the misalignment, which are easily mistaken as SNPs.  Moreover, since read mapping algorithms operate on each read independently,\n it is impossible to place reads on the reference genome such at mismatches are minimized across all reads.  Consequently, even when some reads are\n correctly mapped with indels, reads covering the indel near just the start or end of the read are often incorrectly mapped with respect the true indel,\n also requiring realignment.  Local realignment serves to transform regions with misalignments due to indels into clean reads containing a consensus\n indel suitable for standard variant discovery approaches.  Unlike most mappers, this walker uses the full alignment context to determine whether an\n appropriate alternate reference (i.e. indel) exists.  Following local realignment, the GATK tool Unified Genotyper can be used to sensitively and\n specifically identify indels.\n </p>\n  <p>There are 2 steps to the realignment process:</p>\n     <ol>\n     <li>Determining (small) suspicious intervals which are likely in need of realignment (see the RealignerTargetCreator tool)</li>\n     <li>Running the realigner over those intervals (IndelRealigner)</li>\n     </ol>\n <p>\n For more details, see <a href=\"http://www.broadinstitute.org/gatk/guide/article?id=38\">the indel realignment method documentation</a>.\n </p>\n\n <h3>Input</h3>\n <p>\n One or more aligned BAM files and optionally one or more lists of known indels.\n </p>\n\n <h3>Output</h3>\n <p>\n A realigned version of your input BAM file(s).\n </p>\n\n <h3>Usage example</h3>\n <pre>\n java -jar GenomeAnalysisTK.jar \\\n   -T IndelRealigner \\\n   -R reference.fasta \\\n   -I input.bam \\\n   -known indels.vcf \\\n   -targetIntervals intervalListFromRTC.intervals \\\n   -o realignedBam.bam\n </pre>\n\n <h3>Caveats</h3>\n <ul>\n     <li>The input BAM(s), reference, and known indel file(s) should be the same ones to be used for the IndelRealigner step.</li>\n     <li>Because reads produced from the 454 technology inherently contain false indels, the realigner will not work with them\n (or with reads from similar technologies).</li>\n     <li>This tool also ignores MQ0 reads and reads with consecutive indel operators in the CIGAR string.</li>\n </ul>", "name": "IndelRealigner", "annotinfo": "", "readfilters": [{"filename": "org_broadinstitute_gatk_engine_filters_MalformedReadFilter.php", "name": "MalformedReadFilter"}, {"filename": "org_broadinstitute_gatk_engine_filters_BadCigarFilter.php", "name": "BadCigarFilter"}], "downsampling": {"by": "NONE", "to_cov": -1}, "group": "Sequence Data Processing Tools", "annotfield": ""}