{"summary": "Filter variant calls based on INFO and FORMAT annotations", "parallel": [], "activeregion": {}, "partitiontype": "LOCUS", "walkertype": "LocusWalker", "arguments": [{"summary": "The number of SNPs which make up a cluster", "name": "--clusterSize", "synonyms": "-cluster", "type": "Integer", "required": "no", "fulltext": "Works together with the --clusterWindowSize argument.", "defaultValue": "3", "minValue": "-Infinity", "maxValue": "Infinity", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "optional_param", "options": []}, {"summary": "The window size (in bases) in which to evaluate clustered SNPs", "name": "--clusterWindowSize", "synonyms": "-window", "type": "Integer", "required": "no", "fulltext": "Works together with the --clusterSize argument.  To disable the clustered SNP filter, set this value to less than 1.", "defaultValue": "0", "minValue": "-Infinity", "maxValue": "Infinity", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "optional_param", "options": []}, {"summary": "One or more expression used with INFO fields to filter", "name": "--filterExpression", "synonyms": "-filter", "type": "ArrayList[String]", "required": "no", "fulltext": "VariantFiltration accepts any number of JEXL expressions (so you can have two named filters by using\n --filterName One --filterExpression \"X < 1\" --filterName Two --filterExpression \"X > 2\").", "defaultValue": "NA", "minValue": "NA", "maxValue": "NA", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "optional_param", "options": []}, {"summary": "Names to use for the list of filters", "name": "--filterName", "synonyms": "-filterName", "type": "ArrayList[String]", "required": "no", "fulltext": "This name is put in the FILTER field for variants that get filtered.  Note that there must be a 1-to-1 mapping between filter expressions and filter names.", "defaultValue": "NA", "minValue": "NA", "maxValue": "NA", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "optional_param", "options": []}, {"summary": "Filter records NOT in given input mask.", "name": "--filterNotInMask", "synonyms": "-filterNotInMask", "type": "boolean", "required": "no", "fulltext": "By default, if the -mask argument is used, any variant falling in a mask will be filtered.\n If this argument is used, logic is reversed, and variants falling outside a given mask will be filtered.\n Use case is, for example, if we have an interval list or BED file with \"good\" sites.\n Note that it is up to the user to adapt the name of the mask to make it clear that the reverse logic was used\n (e.g. if masking against Hapmap, use -maskName=hapmap for the normal masking and -maskName=not_hapmap for the reverse masking).", "defaultValue": "NA", "minValue": "NA", "maxValue": "NA", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "optional_flag", "options": []}, {"summary": "One or more expression used with FORMAT (sample/genotype-level) fields to filter (see documentation guide for more info)", "name": "--genotypeFilterExpression", "synonyms": "-G_filter", "type": "ArrayList[String]", "required": "no", "fulltext": "Similar to the INFO field based expressions, but used on the FORMAT (genotype) fields instead.\n VariantFiltration will add the sample-level FT tag to the FORMAT field of filtered samples (this does not affect the record's FILTER tag).\n One can filter normally based on most fields (e.g. \"GQ < 5.0\"), but the GT (genotype) field is an exception. We have put in convenience\n methods so that one can now filter out hets (\"isHet == 1\"), refs (\"isHomRef == 1\"), or homs (\"isHomVar == 1\"). Also available are\n expressions isCalled, isNoCall, isMixed, and isAvailable, in accordance with the methods of the Genotype object.", "defaultValue": "NA", "minValue": "NA", "maxValue": "NA", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "optional_param", "options": []}, {"summary": "Names to use for the list of sample/genotype filters (must be a 1-to-1 mapping); this name is put in the FILTER field for variants that get filtered", "name": "--genotypeFilterName", "synonyms": "-G_filterName", "type": "ArrayList[String]", "required": "no", "fulltext": "Similar to the INFO field based expressions, but used on the FORMAT (genotype) fields instead.", "defaultValue": "NA", "minValue": "NA", "maxValue": "NA", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "optional_param", "options": []}, {"summary": "Remove previous filters applied to the VCF", "name": "--invalidatePreviousFilters", "synonyms": "NA", "type": "boolean", "required": "no", "fulltext": "Invalidate previous filters applied to the VariantContext, applying only the filters here", "defaultValue": "NA", "minValue": "NA", "maxValue": "NA", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "optional_flag", "options": []}, {"summary": "Invert the selection criteria for --filterExpression", "name": "--invertFilterExpression", "synonyms": "-invfilter", "type": "boolean", "required": "no", "fulltext": "Invert the selection criteria for --filterExpression", "defaultValue": "NA", "minValue": "NA", "maxValue": "NA", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "optional_flag", "options": []}, {"summary": "Invert the selection criteria for --genotypeFilterExpression", "name": "--invertGenotypeFilterExpression", "synonyms": "-invG_filter", "type": "boolean", "required": "no", "fulltext": "Invert the selection criteria for --genotypeFilterExpression", "defaultValue": "NA", "minValue": "NA", "maxValue": "NA", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "optional_flag", "options": []}, {"summary": "Input ROD mask", "name": "--mask", "synonyms": "-mask", "type": "RodBinding[Feature]", "required": "no", "fulltext": "Any variant which overlaps entries from the provided mask rod will be filtered. If the user wants logic to be reversed,\n i.e. filter variants that do not overlap with provided mask, then argument -filterNotInMask can be used.\n Note that it is up to the user to adapt the name of the mask to make it clear that the reverse logic was used\n (e.g. if masking against Hapmap, use -maskName=hapmap for the normal masking and -maskName=not_hapmap for the reverse masking).", "defaultValue": "NA", "minValue": "NA", "maxValue": "NA", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "<a href=htsjdk_variant_bcf2_BCF2Codec.php>BCF2</a>, <a href=org_broadinstitute_gatk_utils_codecs_beagle_BeagleCodec.php>BEAGLE</a>, <a href=htsjdk_tribble_bed_BEDCodec.php>BED</a>, <a href=org_broadinstitute_gatk_utils_codecs_table_BedTableCodec.php>BEDTABLE</a>, <a href=htsjdk_tribble_example_ExampleBinaryCodec.php>EXAMPLEBINARY</a>, <a href=htsjdk_tribble_gelitext_GeliTextCodec.php>GELITEXT</a>, <a href=org_broadinstitute_gatk_utils_codecs_hapmap_RawHapMapCodec.php>RAWHAPMAP</a>, <a href=org_broadinstitute_gatk_utils_codecs_refseq_RefSeqCodec.php>REFSEQ</a>, <a href=org_broadinstitute_gatk_utils_codecs_sampileup_SAMPileupCodec.php>SAMPILEUP</a>, <a href=org_broadinstitute_gatk_utils_codecs_samread_SAMReadCodec.php>SAMREAD</a>, <a href=org_broadinstitute_gatk_utils_codecs_table_TableCodec.php>TABLE</a>, <a href=htsjdk_variant_vcf_VCFCodec.php>VCF</a>, <a href=htsjdk_variant_vcf_VCF3Codec.php>VCF3</a>", "kind": "optional_in", "options": []}, {"summary": "How many bases beyond records from a provided 'mask' rod should variants be filtered", "name": "--maskExtension", "synonyms": "-maskExtend", "type": "Integer", "required": "no", "fulltext": "", "defaultValue": "0", "minValue": "-Infinity", "maxValue": "Infinity", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "optional_param", "options": []}, {"summary": "The text to put in the FILTER field if a 'mask' rod is provided and overlaps with a variant call", "name": "--maskName", "synonyms": "-maskName", "type": "String", "required": "no", "fulltext": "When using the -mask argument, the maskName will be annotated in the variant record.\n Note that when using the -filterNotInMask argument to reverse the masking logic,\n it is up to the user to adapt the name of the mask to make it clear that the reverse logic was used\n (e.g. if masking against Hapmap, use -maskName=hapmap for the normal masking and -maskName=not_hapmap for the reverse masking).", "defaultValue": "NA", "minValue": "NA", "maxValue": "NA", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "optional_param", "options": []}, {"summary": "When evaluating the JEXL expressions, missing values should be considered failing the expression", "name": "--missingValuesInExpressionsShouldEvaluateAsFailing", "synonyms": "NA", "type": "Boolean", "required": "no", "fulltext": "By default, if JEXL cannot evaluate your expression for a particular record because one of the annotations is not present, the whole expression evaluates as PASSing.\n Use this argument to have it evaluate as failing filters instead for these cases.", "defaultValue": "NA", "minValue": "NA", "maxValue": "NA", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "optional_flag", "options": []}, {"summary": "File to which variants should be written", "name": "--out", "synonyms": "-o", "type": "VariantContextWriter", "required": "no", "fulltext": "", "defaultValue": "NA", "minValue": "NA", "maxValue": "NA", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "optional_out", "options": []}, {"summary": "Set filtered genotypes to no-call", "name": "--setFilteredGtToNocall", "synonyms": "NA", "type": "boolean", "required": "no", "fulltext": "If this argument is provided, set filtered genotypes to no-call (./.).", "defaultValue": "NA", "minValue": "NA", "maxValue": "NA", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "NA", "kind": "optional_flag", "options": []}, {"summary": "Input VCF file", "name": "--variant", "synonyms": "-V", "type": "RodBinding[VariantContext]", "required": "yes", "fulltext": "Variants from this VCF file are used by this tool as input.\n The file must at least contain the standard VCF header lines, but\n can be empty (i.e., no variants are contained in the file).", "defaultValue": "NA", "minValue": "NA", "maxValue": "NA", "minRecValue": "NA", "maxRecValue": "NA", "rodTypes": "<a href=htsjdk_variant_bcf2_BCF2Codec.php>BCF2</a>, <a href=htsjdk_variant_vcf_VCFCodec.php>VCF</a>, <a href=htsjdk_variant_vcf_VCF3Codec.php>VCF3</a>", "kind": "required_in", "options": []}], "refwindow": {"stop": 50, "start": -50}, "description": "\n\n <p>\n This tool is designed for hard-filtering variant calls based on certain criteria.\n Records are hard-filtered by changing the value in the FILTER field to something other than PASS. Filtered records\n will be preserved in the output unless their removal is requested in the command line. </p>\n\n <h3>Input</h3>\n <p>\n A variant set to filter.\n </p>\n\n <h3>Output</h3>\n <p>\n A filtered VCF.\n </p>\n\n <h3>Usage example</h3>\n <pre>\n java -jar GenomeAnalysisTK.jar \\\n   -T VariantFiltration \\\n   -R reference.fasta \\\n   -o output.vcf \\\n   --variant input.vcf \\\n   --filterExpression \"AB < 0.2 || MQ0 > 50\" \\\n   --filterName \"Nov09filters\" \\\n   --mask mask.vcf \\\n   --maskName InDel\n </pre>", "name": "VariantFiltration", "annotinfo": "", "readfilters": [{"filename": "org_broadinstitute_gatk_engine_filters_MalformedReadFilter.php", "name": "MalformedReadFilter"}, {"filename": "org_broadinstitute_gatk_engine_filters_BadCigarFilter.php", "name": "BadCigarFilter"}, {"filename": "org_broadinstitute_gatk_engine_filters_UnmappedReadFilter.php", "name": "UnmappedReadFilter"}, {"filename": "org_broadinstitute_gatk_engine_filters_NotPrimaryAlignmentFilter.php", "name": "NotPrimaryAlignmentFilter"}, {"filename": "org_broadinstitute_gatk_engine_filters_FailsVendorQualityCheckFilter.php", "name": "FailsVendorQualityCheckFilter"}, {"filename": "org_broadinstitute_gatk_engine_filters_DuplicateReadFilter.php", "name": "DuplicateReadFilter"}], "downsampling": {}, "group": "Variant Evaluation and Manipulation Tools", "annotfield": ""}